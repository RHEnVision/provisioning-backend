---
openapi: 3.0.0
info:
  description: "THIS API IS IN DEVELOPMENT - ENDPOINTS MIGHT CHANGE"
  license:
    name: GPL-3.0
  title: provisioning-api
  version: 1.0.0

paths:
  /pubkeys/{ID}:
    get:
      operationId: getPubkeyById
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        To find if a pubkey was uploaded to particular cloud, check PubkeyResource resource.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID of resource.'
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Pubkey'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
    delete:
      operationId: removePubkeyById
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        If a pubkey was uploaded to one or more clouds, the deletion request will
        attempt to delete those SSH keys from all clouds. This means in order to delete
        a pubkey the account must have valid credentials to all cloud accounts the pubkey
        was uploaded to, otherwise the delete operation will fail and the pubkey will
        not be deleted from Provisioning database.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID of resource.'
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Pubkey'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /pubkeys:
    post:
      operationId: createPubkey
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        When pubkey is created, it is stored in the Provisioning database. Pubkeys are
        uploaded to clouds when an instance is launched.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/v1.Pubkey"
        description: request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Pubkey'
        "500":
          $ref: '#/components/responses/InternalError'
    get:
      operationId: getPubkeyList
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        This operation returns list of all pubkeys for particular account.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Pubkey'
        "500":
          $ref: '#/components/responses/InternalError'
  /sources:
    get:
      description: 'Return list of provisioning sources'
      operationId: getSourceList
      responses:
        '200':
          description: Returned on success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Source'
        '500':
          $ref: "#/components/responses/InternalError"
  /instance_types/{source_id}:
      get:
        description: 'Return a list of instance types'
        operationId: getInstanceTypeList
        parameters:
          - name: source_id
            in: path
            required: true
            description: 'Source ID from Sources Database.'
            schema:
              type: integer
              format: int64
        responses:
          '200':
            description: Return on success.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/v1.InstanceType'
          '404':
            $ref: "#/components/responses/NotFound"
          '500':
            $ref: "#/components/responses/InternalError"
  /reservations:
    get:
      operationId: getReservationsList
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        This operation returns list of all reservations for particular account.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/aws:
    post:
      operationId: createAwsReservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        An AWS reservation is a reservation created for an AWS job.
      requestBody: 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AWSReservationRequest'
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/v1.AWSReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/noop:
    post:
      operationId: createNoopReservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        A Noop reservation actually does nothing and immediately finish background job.
        This reservation has no input payload
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/v1.NoopReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
components:
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/v1.ResponseError'
      description: The request's parameters are not sufficient
    InternalError:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/v1.ResponseError'
      description: The server encountered with an internal error
    NotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/v1.ResponseError'
      description: The specified resource was not found
  schemas:
    v1.AWSReservationRequest:
      properties:
        amount:
          format: int32
          type: integer
        image_id:
          type: string
        instance_type:
          type: string
        pubkey_id:
          format: int64
          type: integer
        source_id:
          format: int64
          type: integer
      type: object
    v1.AWSReservationResponse:
      properties:
        amount:
          format: int32
          type: integer
        aws_reservation_id:
          type: string
        image_id:
          type: string
        instance_type:
          type: string
        pubkey_id:
          format: int64
          type: integer
        reservation_id:
          format: int64
          type: integer
        source_id:
          format: int64
          type: integer
      type: object
    v1.Account:
      properties:
        account_number:
          type: string
        id:
          format: int64
          type: integer
        org_id:
          type: string
      type: object
    v1.InstanceType:
      properties:
        id:
          type: string
      type: object
    v1.NoopReservationResponse:
      properties:
        reservation_id:
          format: int64
          type: integer
      type: object
    v1.Pubkey:
      properties:
        body:
          type: string
        id:
          format: int64
          type: integer
        name:
          type: string
      type: object
    v1.ReservationResponse:
      properties:
        created_at:
          format: date-time
          type: string
        finished_at:
          format: date-time
          type: string
        id:
          format: int64
          type: integer
        provider:
          type: integer
        status:
          type: string
        success:
          type: boolean
      type: object
    v1.ResponseError:
      properties:
        msg:
          type: string
        request_id:
          type: string
      type: object
    v1.Source:
      properties:
        id:
          type: string
        name:
          type: string
        source_type_id:
          type: string
        uid:
          type: string
      type: object
servers:
- description: Local development
  url: http://0.0.0.0:{port}/api/{applicationName}
  variables:
    applicationName:
      default: provisioning
    port:
      default: "8000"
