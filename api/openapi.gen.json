{
  "components": {
    "responses": {
      "BadRequest": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/v1.ResponseError"
            }
          }
        },
        "description": "The request's parameters are not sufficient"
      },
      "InternalError": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/v1.ResponseError"
            }
          }
        },
        "description": "The server encountered with an internal error"
      },
      "NotFound": {
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/v1.ResponseError"
            }
          }
        },
        "description": "The specified resource was not found"
      }
    },
    "schemas": {
      "v1.AWSReservationRequest": {
        "properties": {
          "amount": {
            "format": "int32",
            "type": "integer"
          },
          "image_id": {
            "type": "string"
          },
          "instance_type": {
            "type": "string"
          },
          "pubkey_id": {
            "format": "int64",
            "type": "integer"
          },
          "source_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.AWSReservationResponse": {
        "properties": {
          "amount": {
            "format": "int32",
            "type": "integer"
          },
          "aws_reservation_id": {
            "type": "string"
          },
          "image_id": {
            "type": "string"
          },
          "instance_type": {
            "type": "string"
          },
          "pubkey_id": {
            "format": "int64",
            "type": "integer"
          },
          "reservation_id": {
            "format": "int64",
            "type": "integer"
          },
          "source_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.InstanceTypeResponse": {
        "properties": {
          "architecture": {
            "type": "string"
          },
          "cores": {
            "format": "int32",
            "type": "integer"
          },
          "memory": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "supported": {
            "type": "boolean"
          },
          "vcpus": {
            "format": "int32",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "v1.NoopReservationResponse": {
        "properties": {
          "reservation_id": {
            "format": "int64",
            "type": "integer"
          }
        },
        "type": "object"
      },
      "v1.PubkeyRequest": {
        "properties": {
          "body": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.PubkeyResponse": {
        "properties": {
          "body": {
            "type": "string"
          },
          "fingerprint": {
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.ReservationResponse": {
        "properties": {
          "created_at": {
            "format": "date-time",
            "type": "string"
          },
          "finished_at": {
            "format": "date-time",
            "type": "string"
          },
          "id": {
            "format": "int64",
            "type": "integer"
          },
          "provider": {
            "type": "integer"
          },
          "status": {
            "type": "string"
          },
          "success": {
            "type": "boolean"
          }
        },
        "type": "object"
      },
      "v1.ResponseError": {
        "properties": {
          "msg": {
            "type": "string"
          },
          "request_id": {
            "type": "string"
          }
        },
        "type": "object"
      },
      "v1.SourceResponse": {
        "properties": {
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "source_type_id": {
            "type": "string"
          },
          "uid": {
            "type": "string"
          }
        },
        "type": "object"
      }
    }
  },
  "info": {
    "description": "THIS API IS IN DEVELOPMENT - ENDPOINTS MIGHT CHANGE",
    "license": {
      "name": "GPL-3.0"
    },
    "title": "provisioning-api",
    "version": "1.0.0"
  },
  "openapi": "3.0.0",
  "paths": {
    "/instance_types/{source_id}": {
      "get": {
        "description": "Return a list of instance types",
        "operationId": "getInstanceTypeList",
        "parameters": [
          {
            "description": "Source ID from Sources Database.",
            "in": "path",
            "name": "source_id",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.InstanceTypeResponse"
                }
              }
            },
            "description": "Return on success."
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/pubkeys": {
      "get": {
        "description": "A pubkey represents an SSH public portion of a key pair with name and body. This operation returns list of all pubkeys for particular account.\n",
        "operationId": "getPubkeyList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PubkeyResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "description": "A pubkey represents an SSH public portion of a key pair with name and body. When pubkey is created, it is stored in the Provisioning database. Pubkeys are uploaded to clouds when an instance is launched.\n",
        "operationId": "createPubkey",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.PubkeyRequest"
              }
            }
          },
          "description": "request body",
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PubkeyResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/pubkeys/{ID}": {
      "delete": {
        "description": "A pubkey represents an SSH public portion of a key pair with name and body. If a pubkey was uploaded to one or more clouds, the deletion request will attempt to delete those SSH keys from all clouds. This means in order to delete a pubkey the account must have valid credentials to all cloud accounts the pubkey was uploaded to, otherwise the delete operation will fail and the pubkey will not be deleted from Provisioning database.\n",
        "operationId": "removePubkeyById",
        "parameters": [
          {
            "description": "Database ID of resource.",
            "in": "path",
            "name": "ID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PubkeyResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "get": {
        "description": "A pubkey represents an SSH public portion of a key pair with name and body. Pubkeys must have unique name and body (SSH public key fingerprint) per each account. To find if a pubkey was uploaded to particular cloud, check PubkeyResource resource.\n",
        "operationId": "getPubkeyById",
        "parameters": [
          {
            "description": "Database ID of resource.",
            "in": "path",
            "name": "ID",
            "required": true,
            "schema": {
              "format": "int64",
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.PubkeyResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/reservations": {
      "get": {
        "description": "A reservation is a way to activate a job, keeps all data needed for a job to start. This operation returns list of all reservations for particular account.\n",
        "operationId": "getReservationsList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/v1.ReservationResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/reservations/aws": {
      "post": {
        "description": "A reservation is a way to activate a job, keeps all data needed for a job to start. An AWS reservation is a reservation created for an AWS job.\n",
        "operationId": "createAwsReservation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/v1.AWSReservationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.AWSReservationResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/reservations/noop": {
      "post": {
        "description": "A reservation is a way to activate a job, keeps all data needed for a job to start. A Noop reservation actually does nothing and immediately finish background job. This reservation has no input payload\n",
        "operationId": "createNoopReservation",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/v1.NoopReservationResponse"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/sources": {
      "get": {
        "description": "Return list of provisioning sources",
        "operationId": "getSourceList",
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/v1.SourceResponse"
                  },
                  "type": "array"
                }
              }
            },
            "description": "Returned on success."
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "servers": [
    {
      "description": "Local development",
      "url": "http://0.0.0.0:{port}/api/{applicationName}",
      "variables": {
        "applicationName": {
          "default": "provisioning"
        },
        "port": {
          "default": "8000"
        }
      }
    }
  ]
}