# nonk8s
---
apiVersion: v1
kind: Template
labels:
  app: provisioning-backend
  template: provisioning-backend
metadata:
  name: provisioning-backend
  annotations:
    description: API backend for provisioning in console.redhat.com

objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: provisioning-backend
      labels:
        app: provisioning-backend
        service: provisioning
    spec:
      envName: ${ENV_NAME}
      featureFlags: true
      testing:
        iqePlugin: provisioning
      deployments:
        - name: worker
          replicas: ${{WORKER_REPLICAS}}
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbackend
              - worker
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbackend
                  - migrate
                inheritEnv: true
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: REST_ENDPOINTS_TRACE_DATA
                value: ${REST_ENDPOINTS_TRACE_DATA}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: APP_NOTIFICATIONS_ENABLED
                value: ${APP_NOTIFICATIONS_ENABLED}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: AZURE_TENANT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: tenant_id
                    optional: true
              - name: AZURE_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_id
                    optional: true
              - name: AZURE_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_secret
                    optional: true
              - name: GCP_JSON
                valueFrom:
                  secretKeyRef:
                    name: provisioning-gcp-acc
                    key: json
                    optional: true
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: provisioning-sentry
                    key: dsn
                    optional: true
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
              - name: WORKER_QUEUE
                value: ${WORKER_QUEUE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
        - name: statuser
          replicas: ${{STATUSER_REPLICAS}}
          metadata:
            annotations:
              ignore-check.kube-linter.io/minimum-three-replicas: "statuser pod runs in a single instance"
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbackend
              - statuser
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbackend
                  - migrate
                inheritEnv: true
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: REST_ENDPOINTS_TRACE_DATA
                value: ${REST_ENDPOINTS_TRACE_DATA}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: APP_NOTIFICATIONS_ENABLED
                value: ${APP_NOTIFICATIONS_ENABLED}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: AZURE_TENANT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: tenant_id
                    optional: true
              - name: AZURE_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_id
                    optional: true
              - name: AZURE_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_secret
                    optional: true
              - name: GCP_JSON
                valueFrom:
                  secretKeyRef:
                    name: provisioning-gcp-acc
                    key: json
                    optional: true
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: provisioning-sentry
                    key: dsn
                    optional: true
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
        - name: stats
          replicas: ${{STATS_REPLICAS}}
          metadata:
            annotations:
              ignore-check.kube-linter.io/minimum-three-replicas: "stats pod runs in a single instance"
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbackend
              - stats
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbackend
                  - migrate
                inheritEnv: true
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: REST_ENDPOINTS_TRACE_DATA
                value: ${REST_ENDPOINTS_TRACE_DATA}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: APP_NOTIFICATIONS_ENABLED
                value: ${APP_NOTIFICATIONS_ENABLED}
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: provisioning-sentry
                    key: dsn
                    optional: true
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
        - name: api
          replicas: ${{API_REPLICAS}}
          webServices:
            public:
              enabled: true
              apiPath: provisioning
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbackend
              - api
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbackend
                  - migrate
                inheritEnv: true
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /ping
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 35
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 120
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ping
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 35
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 120
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: REST_ENDPOINTS_TRACE_DATA
                value: ${REST_ENDPOINTS_TRACE_DATA}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: APP_RBAC_ENABLED
                value: ${APP_RBAC_ENABLED}
              - name: REST_ENDPOINTS_RBAC_URL
                value: ${REST_ENDPOINTS_RBAC_URL}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: APP_NOTIFICATIONS_ENABLED
                value: ${APP_NOTIFICATIONS_ENABLED}
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: AZURE_TENANT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: tenant_id
                    optional: true
              - name: AZURE_CLIENT_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_id
                    optional: true
              - name: AZURE_CLIENT_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: client_secret
                    optional: true
              - name: AZURE_CLIENT_PRINCIPAL_ID
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: principal_id
                    optional: true
              - name: AZURE_CLIENT_PRINCIPAL_NAME
                valueFrom:
                  secretKeyRef:
                    name: provisioning-azure-acc
                    key: principal_name
                    optional: true
              - name: GCP_JSON
                valueFrom:
                  secretKeyRef:
                    name: provisioning-gcp-acc
                    key: json
                    optional: true
              - name: SENTRY_DSN
                valueFrom:
                  secretKeyRef:
                    name: provisioning-sentry
                    key: dsn
                    optional: true
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
              - name: WORKER_QUEUE
                value: ${WORKER_QUEUE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
      database:
        name: provisioning
        version: 13
      kafkaTopics:
        - topicName: platform.provisioning.internal.availability-check
          partitions: 1
          replicas: 3
        - topicName: platform.sources.event-stream
        - topicName: platform.sources.status
        - topicName: platform.notifications.ingress
      inMemoryDb: true
      dependencies:
        - rbac
        - sources-api
        - sources-superkey-worker
        - notifications-backend
      optionalDependencies:
        - image-builder

  - apiVersion: v1
    kind: ConfigMap
    metadata:
      name: notifications-ephemeral-data
    data:
      ephemeral_data.json: |
        {
          "bundles": [
            {
              "name": "rhel",
              "display_name": "Red Hat Enterprise Linux",
              "applications": [
                {
                  "name": "image-builder",
                  "display_name": "Image Builder",
                  "event_types": [
                    {
                      "name": "launch-success",
                      "display_name": "Launch Success",
                      "description": "Triggers a notification when a launch is successful"
                    },
                    {
                      "name": "launch-failed",
                      "display_name": "Launch Failed",
                      "description": "Triggers a notification when a launch fails"
                    }
                  ]
                }
              ]
            }
          ]
        }

  - apiVersion: metrics.console.redhat.com/v1alpha1
    kind: FloorPlan
    metadata:
      name: provisioning-backend
      labels:
        app: provisioning-backend
        service: provisioning
    spec:
      database:
        secretName: ${FLOORIST_DB_SECRET_NAME}
      objectStore:
        secretName: ${FLOORIST_BUCKET_SECRET_NAME}
      logLevel: ${FLOORIST_LOGLEVEL}
      suspend: ${{FLOORIST_SUSPEND}}
      queries:
        - prefix: ${FLOORIST_QUERY_PREFIX}/reservations
          query: >-
            (select 'aws'                                        as provider,
            r.id,
            r.created_at,
            r.finished_at,
            r.success,
            r.status || ' (' || r.step || '/' || r.steps || ')' as status,
            a.account_number,
            a.org_id,
            d.source_id,
            d.image_id,
            d.detail -> 'instance_type'                  as type,
            d.detail -> 'region'                         as region,
            d.detail -> 'amount'                         as amount,
            d.detail -> 'launch_template_id'             as template
            from reservations r
            join aws_reservation_details d on r.id = d.reservation_id
            join accounts a on r.account_id = a.id
            where provider = provider_type_aws())

            union all

            (select 'azure'                     as provider,
            r.id,
            r.created_at,
            r.finished_at,
            r.success,
            r.status || ' (' || r.step || '/' || r.steps || ')' as status,
            a.account_number,
            a.org_id,
            d.source_id,
            d.image_id,
            d.detail -> 'instance_size' as type,
            d.detail -> 'location'      as region,
            d.detail -> 'amount'        as amount,
            null                        as template
            from reservations r
            join azure_reservation_details d on r.id = d.reservation_id
            join accounts a on r.account_id = a.id
            where provider = provider_type_azure())

            union all

            (select 'gcp'                     as provider,
            r.id,
            r.created_at,
            r.finished_at,
            r.success,
            r.status || ' (' || r.step || '/' || r.steps || ')' as status,
            a.account_number,
            a.org_id,
            d.source_id,
            d.image_id,
            d.detail -> 'machine_type' as type,
            d.detail -> 'zone'        as region,
            d.detail -> 'amount'        as amount,
            d.detail -> 'launch_template_id' as template
            from reservations r
            join gcp_reservation_details d on r.id = d.reservation_id
            join accounts a on r.account_id = a.id
            where provider = provider_type_gcp());


# possible application ENV variables are in config/api.env.example
parameters:
  - description: ClowdEnv Name
    name: ENV_NAME
    required: true
  - description: CPU request for each pod (placement)
    name: CPU_REQUESTS
    value: 100m
  - description: Memory request for each pod (placement)
    name: MEMORY_REQUESTS
    value: 100Mi
  - description: CPU limit for each pod (throttling)
    name: CPU_LIMIT
    value: 500m
  - description: Memory limit for each pod (pod restart)
    name: MEMORY_LIMIT
    value: 600Mi
  - description: Amount of replicas for pod serving the API
    name: API_REPLICAS
    value: "3"
  - description: Amount of replicas for pod processing jobs
    name: WORKER_REPLICAS
    value: "3"
  - description: Amount of replicas for pod processing availability checks
    name: STATUSER_REPLICAS
    value: "1"
  - description: Amount of replicas for pod processing stats
    name: STATS_REPLICAS
    value: "1"
  - description: Image tag
    name: IMAGE_TAG
    required: true
  - description: Image name
    name: IMAGE
    value: quay.io/cloudservices/provisioning-backend
  - description: Logging level (trace, debug, info, warn, error, fatal, panic)
    name: LOGGING_LEVEL
    value: "debug"
  - description: Log HTTP client body request and responses (can be verbose)
    name: REST_ENDPOINTS_TRACE_DATA
    value: "false"
  - description: Postgres driver logging level (trace, debug, info, warn, error, fatal, panic)
    name: DATABASE_LOGGING_LEVEL
    value: "debug"
  - description: RBAC checking enabled
    name: APP_RBAC_ENABLED
    value: "true"
  - description: RBAC checking enabled
    name: REST_ENDPOINTS_RBAC_URL
    value: "http://rbac-service:8000/api/rbac/v1"
  - description: OpenTelemetry collecting
    name: TELEMETRY_ENABLED
    value: "true"
  - description: OpenTelemetry export into the logger
    name: TELEMETRY_LOGGER_ENABLED
    value: "true"
  - description: Determines Clowder deployment
    name: CLOWDER_ENABLED
    value: "true"
  - name: FLOORIST_LOGLEVEL
    description: Floorist loglevel config
    value: 'INFO'
  - name: FLOORIST_SUSPEND
    description: Disable Floorist cronjob execution
    value: 'false'
  - name: FLOORIST_DB_SECRET_NAME
    description: Name of the secret for accessing the database for floorist
    value: "provisioning-db"
  - name: FLOORIST_BUCKET_SECRET_NAME
    description: Name of the secret for accessing the bucket for the floorist data dump
    value: "floorist-bucket"
  - name: FLOORIST_QUERY_PREFIX
    description: Prefix for separating query data between prod and stage in the bucket
    value: "hms_analytics/provisioning/unknown"
  - description: ImageBuilder service URL
    name: IMAGEBUILDER_URL
    required: false
    value: "http://image-builder:8080"
  - description: Instance prefix adds string to all instance names, leave blank for production
    name: APP_INSTANCE_PREFIX
    value: ""
  - description: Application cache type (none, memory or redis)
    name: APP_CACHE_TYPE
    value: "redis"
  - description: Internal queue type (memory/sqs/postgres).
    name: WORKER_QUEUE
    value: "redis"
  - description: Notification service enabled
    name: APP_NOTIFICATIONS_ENABLED
    value: "true"
