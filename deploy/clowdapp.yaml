---
apiVersion: v1
kind: Template
labels:
  app: provisioning-backend
  template: provisioning-backend
metadata:
  name: provisioning-backend
  annotations:
    description: API backend for provisioning in console.redhat.com

objects:
  - apiVersion: cloud.redhat.com/v1alpha1
    kind: ClowdApp
    metadata:
      name: provisioning-backend
      labels:
        app: provisioning-backend
        service: provisioning
    spec:
      envName: ${ENV_NAME}
      featureFlags: true
      testing:
        iqePlugin: provisioning
      deployments:
        - name: worker
          replicas: 2
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbworker
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbmigrate
                inheritEnv: true
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
              - name: WORKER_QUEUE
                value: ${WORKER_QUEUE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
        - name: statuser
          # statuser pod must have exactly one replicas
          replicas: 1
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            command:
              - /pbstatuser
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbmigrate
                inheritEnv: true
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
        - name: api
          replicas: 2
          webServices:
            public:
              enabled: true
              apiPath: provisioning
          podSpec:
            image: ${IMAGE}:${IMAGE_TAG}
            initContainers:
              - name: run-migrations
                image: "${IMAGE}:${IMAGE_TAG}"
                command:
                  - /pbmigrate
                inheritEnv: true
            livenessProbe:
              failureThreshold: 3
              httpGet:
                path: /ping
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 35
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 120
            readinessProbe:
              failureThreshold: 3
              httpGet:
                path: /ping
                port: 8000
                scheme: HTTP
              initialDelaySeconds: 35
              periodSeconds: 5
              successThreshold: 1
              timeoutSeconds: 120
            env:
              - name: LOGGING_LEVEL
                value: ${LOGGING_LEVEL}
              - name: DATABASE_LOGGING_LEVEL
                value: ${DATABASE_LOGGING_LEVEL}
              - name: TELEMETRY_ENABLED
                value: ${TELEMETRY_ENABLED}
              - name: TELEMETRY_LOGGER_ENABLED
                value: ${TELEMETRY_LOGGER_ENABLED}
              - name: CLOWDER_ENABLED
                value: ${CLOWDER_ENABLED}
              - name: REST_ENDPOINTS_IMAGE_BUILDER_URL
                value: "${IMAGEBUILDER_URL}/api/image-builder/v1"
              - name: APP_COMPRESSION
                value: ${APP_COMPRESSION}
              - name: AWS_KEY
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_access_key_id
                    optional: false
              - name: AWS_SECRET
                valueFrom:
                  secretKeyRef:
                    name: provisioning-aws-acc
                    key: aws_secret_access_key
                    optional: false
              - name: APP_INSTANCE_PREFIX
                value: ${APP_INSTANCE_PREFIX}
              - name: APP_CACHE_TYPE
                value: ${APP_CACHE_TYPE}
              - name: WORKER_QUEUE
                value: ${WORKER_QUEUE}
            resources:
              limits:
                cpu: ${{CPU_LIMIT}}
                memory: ${MEMORY_LIMIT}
              requests:
                cpu: ${CPU_REQUESTS}
                memory: ${MEMORY_REQUESTS}
      database:
        name: provisioning
        version: 13
      kafkaTopics:
        - topicName: platform.provisioning.internal.availability-check
          partitions: 1
          replicas: 3
        - topicName: platform.sources.event-stream
        - topicName: platform.sources.status
      inMemoryDb: true
      dependencies:
        - sources-api
      optionalDependencies:
        - image-builder

# possible application ENV variables are in config/api.env.example
parameters:
  - description: ClowdEnv Name
    name: ENV_NAME
    required: true
  - description: Cpu limit of service
    name: CPU_LIMIT
    value: "1"
  - description: Cpu request increment
    name: CPU_REQUESTS
    value: 100m
  - description: memory limit of service
    name: MEMORY_LIMIT
    value: 1Gi
  - description: memory request increment
    name: MEMORY_REQUESTS
    value: 100Mi
  - description: Image tag
    name: IMAGE_TAG
    required: true
  - description: Image name
    name: IMAGE
    value: quay.io/cloudservices/provisioning-backend
  - description: Logging level (trace, debug, info, warn, error, fatal, panic)
    name: LOGGING_LEVEL
    value: "debug"
  - description: Postgres driver logging level (trace, debug, info, warn, error, fatal, panic)
    name: DATABASE_LOGGING_LEVEL
    value: "debug"
  - description: OpenTelemetry collecting
    name: TELEMETRY_ENABLED
    value: "true"
  - description: OpenTelemetry export into the logger
    name: TELEMETRY_LOGGER_ENABLED
    value: "true"
  - description: Enable compression of the API responses
    name: APP_COMPRESSION
    value: "true"
  - description: Determines Clowder deployment
    name: CLOWDER_ENABLED
    value: "true"
  - description: ImageBuilder service URL
    name: IMAGEBUILDER_URL
    required: false
    value: "http://image-builder:8080"
  - description: Instance prefix adds string to all instance names, leave blank for production
    name: APP_INSTANCE_PREFIX
    value: ""
  - description: Application cache type (none, memory or redis)
    name: APP_CACHE_TYPE
    value: "redis"
  - description: Internal queue type (memory/sqs/postgres).
    name: WORKER_QUEUE
    value: "redis"

