// Code generated by SQLBoiler 4.9.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SSHKey is an object representing the database table.
type SSHKey struct {
	ID   int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	Body string `boil:"body" json:"body" toml:"body" yaml:"body"`

	R *sshKeyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sshKeyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SSHKeyColumns = struct {
	ID   string
	Body string
}{
	ID:   "id",
	Body: "body",
}

var SSHKeyTableColumns = struct {
	ID   string
	Body string
}{
	ID:   "ssh_keys.id",
	Body: "ssh_keys.body",
}

// Generated where

var SSHKeyWhere = struct {
	ID   whereHelperint64
	Body whereHelperstring
}{
	ID:   whereHelperint64{field: "\"ssh_keys\".\"id\""},
	Body: whereHelperstring{field: "\"ssh_keys\".\"body\""},
}

// SSHKeyRels is where relationship names are stored.
var SSHKeyRels = struct {
	SSHKeyResources string
}{
	SSHKeyResources: "SSHKeyResources",
}

// sshKeyR is where relationships are stored.
type sshKeyR struct {
	SSHKeyResources SSHKeyResourceSlice `boil:"SSHKeyResources" json:"SSHKeyResources" toml:"SSHKeyResources" yaml:"SSHKeyResources"`
}

// NewStruct creates a new relationship struct
func (*sshKeyR) NewStruct() *sshKeyR {
	return &sshKeyR{}
}

// sshKeyL is where Load methods for each relationship are stored.
type sshKeyL struct{}

var (
	sshKeyAllColumns            = []string{"id", "body"}
	sshKeyColumnsWithoutDefault = []string{"body"}
	sshKeyColumnsWithDefault    = []string{"id"}
	sshKeyPrimaryKeyColumns     = []string{"id"}
	sshKeyGeneratedColumns      = []string{"id"}
)

type (
	// SSHKeySlice is an alias for a slice of pointers to SSHKey.
	// This should almost always be used instead of []SSHKey.
	SSHKeySlice []*SSHKey
	// SSHKeyHook is the signature for custom SSHKey hook methods
	SSHKeyHook func(context.Context, boil.ContextExecutor, *SSHKey) error

	sshKeyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sshKeyType                 = reflect.TypeOf(&SSHKey{})
	sshKeyMapping              = queries.MakeStructMapping(sshKeyType)
	sshKeyPrimaryKeyMapping, _ = queries.BindMapping(sshKeyType, sshKeyMapping, sshKeyPrimaryKeyColumns)
	sshKeyInsertCacheMut       sync.RWMutex
	sshKeyInsertCache          = make(map[string]insertCache)
	sshKeyUpdateCacheMut       sync.RWMutex
	sshKeyUpdateCache          = make(map[string]updateCache)
	sshKeyUpsertCacheMut       sync.RWMutex
	sshKeyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sshKeyAfterSelectHooks []SSHKeyHook

var sshKeyBeforeInsertHooks []SSHKeyHook
var sshKeyAfterInsertHooks []SSHKeyHook

var sshKeyBeforeUpdateHooks []SSHKeyHook
var sshKeyAfterUpdateHooks []SSHKeyHook

var sshKeyBeforeDeleteHooks []SSHKeyHook
var sshKeyAfterDeleteHooks []SSHKeyHook

var sshKeyBeforeUpsertHooks []SSHKeyHook
var sshKeyAfterUpsertHooks []SSHKeyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SSHKey) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SSHKey) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SSHKey) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SSHKey) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SSHKey) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SSHKey) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SSHKey) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SSHKey) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SSHKey) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSSHKeyHook registers your hook function for all future operations.
func AddSSHKeyHook(hookPoint boil.HookPoint, sshKeyHook SSHKeyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sshKeyAfterSelectHooks = append(sshKeyAfterSelectHooks, sshKeyHook)
	case boil.BeforeInsertHook:
		sshKeyBeforeInsertHooks = append(sshKeyBeforeInsertHooks, sshKeyHook)
	case boil.AfterInsertHook:
		sshKeyAfterInsertHooks = append(sshKeyAfterInsertHooks, sshKeyHook)
	case boil.BeforeUpdateHook:
		sshKeyBeforeUpdateHooks = append(sshKeyBeforeUpdateHooks, sshKeyHook)
	case boil.AfterUpdateHook:
		sshKeyAfterUpdateHooks = append(sshKeyAfterUpdateHooks, sshKeyHook)
	case boil.BeforeDeleteHook:
		sshKeyBeforeDeleteHooks = append(sshKeyBeforeDeleteHooks, sshKeyHook)
	case boil.AfterDeleteHook:
		sshKeyAfterDeleteHooks = append(sshKeyAfterDeleteHooks, sshKeyHook)
	case boil.BeforeUpsertHook:
		sshKeyBeforeUpsertHooks = append(sshKeyBeforeUpsertHooks, sshKeyHook)
	case boil.AfterUpsertHook:
		sshKeyAfterUpsertHooks = append(sshKeyAfterUpsertHooks, sshKeyHook)
	}
}

// OneP returns a single sshKey record from the query, and panics on error.
func (q sshKeyQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *SSHKey {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single sshKey record from the query.
func (q sshKeyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SSHKey, error) {
	o := &SSHKey{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ssh_keys")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SSHKey records from the query, and panics on error.
func (q sshKeyQuery) AllP(ctx context.Context, exec boil.ContextExecutor) SSHKeySlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SSHKey records from the query.
func (q sshKeyQuery) All(ctx context.Context, exec boil.ContextExecutor) (SSHKeySlice, error) {
	var o []*SSHKey

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SSHKey slice")
	}

	if len(sshKeyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SSHKey records in the query, and panics on error.
func (q sshKeyQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SSHKey records in the query.
func (q sshKeyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ssh_keys rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q sshKeyQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q sshKeyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ssh_keys exists")
	}

	return count > 0, nil
}

// SSHKeyResources retrieves all the ssh_key_resource's SSHKeyResources with an executor.
func (o *SSHKey) SSHKeyResources(mods ...qm.QueryMod) sshKeyResourceQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"ssh_key_resources\".\"ssh_key_id\"=?", o.ID),
	)

	return SSHKeyResources(queryMods...)
}

// LoadSSHKeyResources allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (sshKeyL) LoadSSHKeyResources(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSSHKey interface{}, mods queries.Applicator) error {
	var slice []*SSHKey
	var object *SSHKey

	if singular {
		object = maybeSSHKey.(*SSHKey)
	} else {
		slice = *maybeSSHKey.(*[]*SSHKey)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sshKeyR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sshKeyR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ssh_key_resources`),
		qm.WhereIn(`ssh_key_resources.ssh_key_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load ssh_key_resources")
	}

	var resultSlice []*SSHKeyResource
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice ssh_key_resources")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on ssh_key_resources")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ssh_key_resources")
	}

	if len(sshKeyResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.SSHKeyResources = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &sshKeyResourceR{}
			}
			foreign.R.SSHKey = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.SSHKeyID {
				local.R.SSHKeyResources = append(local.R.SSHKeyResources, foreign)
				if foreign.R == nil {
					foreign.R = &sshKeyResourceR{}
				}
				foreign.R.SSHKey = local
				break
			}
		}
	}

	return nil
}

// AddSSHKeyResourcesP adds the given related objects to the existing relationships
// of the ssh_key, optionally inserting them as new records.
// Appends related to o.R.SSHKeyResources.
// Sets related.R.SSHKey appropriately.
// Panics on error.
func (o *SSHKey) AddSSHKeyResourcesP(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SSHKeyResource) {
	if err := o.AddSSHKeyResources(ctx, exec, insert, related...); err != nil {
		panic(boil.WrapErr(err))
	}
}

// AddSSHKeyResources adds the given related objects to the existing relationships
// of the ssh_key, optionally inserting them as new records.
// Appends related to o.R.SSHKeyResources.
// Sets related.R.SSHKey appropriately.
func (o *SSHKey) AddSSHKeyResources(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*SSHKeyResource) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.SSHKeyID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"ssh_key_resources\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 0, []string{"ssh_key_id"}),
				strmangle.WhereClause("\"", "\"", 0, sshKeyResourcePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.SSHKeyID = o.ID
		}
	}

	if o.R == nil {
		o.R = &sshKeyR{
			SSHKeyResources: related,
		}
	} else {
		o.R.SSHKeyResources = append(o.R.SSHKeyResources, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &sshKeyResourceR{
				SSHKey: o,
			}
		} else {
			rel.R.SSHKey = o
		}
	}
	return nil
}

// SSHKeys retrieves all the records using an executor.
func SSHKeys(mods ...qm.QueryMod) sshKeyQuery {
	mods = append(mods, qm.From("\"ssh_keys\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ssh_keys\".*"})
	}

	return sshKeyQuery{NewQuery(mods...)}
}

// FindSSHKeyP retrieves a single record by ID with an executor, and panics on error.
func FindSSHKeyP(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) *SSHKey {
	retobj, err := FindSSHKey(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSSHKey retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSSHKey(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SSHKey, error) {
	sshKeyObj := &SSHKey{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ssh_keys\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sshKeyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ssh_keys")
	}

	if err = sshKeyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sshKeyObj, err
	}

	return sshKeyObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SSHKey) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SSHKey) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ssh_keys provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sshKeyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sshKeyInsertCacheMut.RLock()
	cache, cached := sshKeyInsertCache[key]
	sshKeyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sshKeyAllColumns,
			sshKeyColumnsWithDefault,
			sshKeyColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sshKeyGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sshKeyType, sshKeyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sshKeyType, sshKeyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ssh_keys\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ssh_keys\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ssh_keys")
	}

	if !cached {
		sshKeyInsertCacheMut.Lock()
		sshKeyInsertCache[key] = cache
		sshKeyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the SSHKey, and panics on error.
// See Update for more documentation.
func (o *SSHKey) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the SSHKey.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SSHKey) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sshKeyUpdateCacheMut.RLock()
	cache, cached := sshKeyUpdateCache[key]
	sshKeyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sshKeyAllColumns,
			sshKeyPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sshKeyGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ssh_keys, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ssh_keys\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sshKeyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sshKeyType, sshKeyMapping, append(wl, sshKeyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ssh_keys row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ssh_keys")
	}

	if !cached {
		sshKeyUpdateCacheMut.Lock()
		sshKeyUpdateCache[key] = cache
		sshKeyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q sshKeyQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q sshKeyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ssh_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ssh_keys")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SSHKeySlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SSHKeySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ssh_keys\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sshKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sshKey")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SSHKey) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SSHKey) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ssh_keys provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sshKeyColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sshKeyUpsertCacheMut.RLock()
	cache, cached := sshKeyUpsertCache[key]
	sshKeyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sshKeyAllColumns,
			sshKeyColumnsWithDefault,
			sshKeyColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sshKeyAllColumns,
			sshKeyPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ssh_keys, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sshKeyPrimaryKeyColumns))
			copy(conflict, sshKeyPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ssh_keys\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sshKeyType, sshKeyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sshKeyType, sshKeyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ssh_keys")
	}

	if !cached {
		sshKeyUpsertCacheMut.Lock()
		sshKeyUpsertCache[key] = cache
		sshKeyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single SSHKey record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SSHKey) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single SSHKey record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SSHKey) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SSHKey provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sshKeyPrimaryKeyMapping)
	sql := "DELETE FROM \"ssh_keys\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ssh_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ssh_keys")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q sshKeyQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q sshKeyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sshKeyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ssh_keys")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ssh_keys")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SSHKeySlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SSHKeySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sshKeyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ssh_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sshKey slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ssh_keys")
	}

	if len(sshKeyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SSHKey) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SSHKey) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSSHKey(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SSHKeySlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SSHKeySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SSHKeySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ssh_keys\".* FROM \"ssh_keys\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SSHKeySlice")
	}

	*o = slice

	return nil
}

// SSHKeyExistsP checks if the SSHKey row exists. Panics on error.
func SSHKeyExistsP(ctx context.Context, exec boil.ContextExecutor, iD int64) bool {
	e, err := SSHKeyExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SSHKeyExists checks if the SSHKey row exists.
func SSHKeyExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ssh_keys\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ssh_keys exists")
	}

	return exists, nil
}
