// Code generated by SQLBoiler 4.9.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SSHKeyResource is an object representing the database table.
type SSHKeyResource struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	SSHKeyID int64  `boil:"ssh_key_id" json:"ssh_key_id" toml:"ssh_key_id" yaml:"ssh_key_id"`
	Cid      string `boil:"cid" json:"cid" toml:"cid" yaml:"cid"`

	R *sshKeyResourceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sshKeyResourceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SSHKeyResourceColumns = struct {
	ID       string
	SSHKeyID string
	Cid      string
}{
	ID:       "id",
	SSHKeyID: "ssh_key_id",
	Cid:      "cid",
}

var SSHKeyResourceTableColumns = struct {
	ID       string
	SSHKeyID string
	Cid      string
}{
	ID:       "ssh_key_resources.id",
	SSHKeyID: "ssh_key_resources.ssh_key_id",
	Cid:      "ssh_key_resources.cid",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var SSHKeyResourceWhere = struct {
	ID       whereHelperint64
	SSHKeyID whereHelperint64
	Cid      whereHelperstring
}{
	ID:       whereHelperint64{field: "\"ssh_key_resources\".\"id\""},
	SSHKeyID: whereHelperint64{field: "\"ssh_key_resources\".\"ssh_key_id\""},
	Cid:      whereHelperstring{field: "\"ssh_key_resources\".\"cid\""},
}

// SSHKeyResourceRels is where relationship names are stored.
var SSHKeyResourceRels = struct {
	SSHKey string
}{
	SSHKey: "SSHKey",
}

// sshKeyResourceR is where relationships are stored.
type sshKeyResourceR struct {
	SSHKey *SSHKey `boil:"SSHKey" json:"SSHKey" toml:"SSHKey" yaml:"SSHKey"`
}

// NewStruct creates a new relationship struct
func (*sshKeyResourceR) NewStruct() *sshKeyResourceR {
	return &sshKeyResourceR{}
}

// sshKeyResourceL is where Load methods for each relationship are stored.
type sshKeyResourceL struct{}

var (
	sshKeyResourceAllColumns            = []string{"id", "ssh_key_id", "cid"}
	sshKeyResourceColumnsWithoutDefault = []string{"ssh_key_id", "cid"}
	sshKeyResourceColumnsWithDefault    = []string{"id"}
	sshKeyResourcePrimaryKeyColumns     = []string{"id"}
	sshKeyResourceGeneratedColumns      = []string{"id"}
)

type (
	// SSHKeyResourceSlice is an alias for a slice of pointers to SSHKeyResource.
	// This should almost always be used instead of []SSHKeyResource.
	SSHKeyResourceSlice []*SSHKeyResource
	// SSHKeyResourceHook is the signature for custom SSHKeyResource hook methods
	SSHKeyResourceHook func(context.Context, boil.ContextExecutor, *SSHKeyResource) error

	sshKeyResourceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sshKeyResourceType                 = reflect.TypeOf(&SSHKeyResource{})
	sshKeyResourceMapping              = queries.MakeStructMapping(sshKeyResourceType)
	sshKeyResourcePrimaryKeyMapping, _ = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, sshKeyResourcePrimaryKeyColumns)
	sshKeyResourceInsertCacheMut       sync.RWMutex
	sshKeyResourceInsertCache          = make(map[string]insertCache)
	sshKeyResourceUpdateCacheMut       sync.RWMutex
	sshKeyResourceUpdateCache          = make(map[string]updateCache)
	sshKeyResourceUpsertCacheMut       sync.RWMutex
	sshKeyResourceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sshKeyResourceAfterSelectHooks []SSHKeyResourceHook

var sshKeyResourceBeforeInsertHooks []SSHKeyResourceHook
var sshKeyResourceAfterInsertHooks []SSHKeyResourceHook

var sshKeyResourceBeforeUpdateHooks []SSHKeyResourceHook
var sshKeyResourceAfterUpdateHooks []SSHKeyResourceHook

var sshKeyResourceBeforeDeleteHooks []SSHKeyResourceHook
var sshKeyResourceAfterDeleteHooks []SSHKeyResourceHook

var sshKeyResourceBeforeUpsertHooks []SSHKeyResourceHook
var sshKeyResourceAfterUpsertHooks []SSHKeyResourceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SSHKeyResource) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SSHKeyResource) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SSHKeyResource) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SSHKeyResource) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SSHKeyResource) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SSHKeyResource) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SSHKeyResource) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SSHKeyResource) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SSHKeyResource) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sshKeyResourceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSSHKeyResourceHook registers your hook function for all future operations.
func AddSSHKeyResourceHook(hookPoint boil.HookPoint, sshKeyResourceHook SSHKeyResourceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sshKeyResourceAfterSelectHooks = append(sshKeyResourceAfterSelectHooks, sshKeyResourceHook)
	case boil.BeforeInsertHook:
		sshKeyResourceBeforeInsertHooks = append(sshKeyResourceBeforeInsertHooks, sshKeyResourceHook)
	case boil.AfterInsertHook:
		sshKeyResourceAfterInsertHooks = append(sshKeyResourceAfterInsertHooks, sshKeyResourceHook)
	case boil.BeforeUpdateHook:
		sshKeyResourceBeforeUpdateHooks = append(sshKeyResourceBeforeUpdateHooks, sshKeyResourceHook)
	case boil.AfterUpdateHook:
		sshKeyResourceAfterUpdateHooks = append(sshKeyResourceAfterUpdateHooks, sshKeyResourceHook)
	case boil.BeforeDeleteHook:
		sshKeyResourceBeforeDeleteHooks = append(sshKeyResourceBeforeDeleteHooks, sshKeyResourceHook)
	case boil.AfterDeleteHook:
		sshKeyResourceAfterDeleteHooks = append(sshKeyResourceAfterDeleteHooks, sshKeyResourceHook)
	case boil.BeforeUpsertHook:
		sshKeyResourceBeforeUpsertHooks = append(sshKeyResourceBeforeUpsertHooks, sshKeyResourceHook)
	case boil.AfterUpsertHook:
		sshKeyResourceAfterUpsertHooks = append(sshKeyResourceAfterUpsertHooks, sshKeyResourceHook)
	}
}

// OneP returns a single sshKeyResource record from the query, and panics on error.
func (q sshKeyResourceQuery) OneP(ctx context.Context, exec boil.ContextExecutor) *SSHKeyResource {
	o, err := q.One(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// One returns a single sshKeyResource record from the query.
func (q sshKeyResourceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SSHKeyResource, error) {
	o := &SSHKeyResource{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for ssh_key_resources")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllP returns all SSHKeyResource records from the query, and panics on error.
func (q sshKeyResourceQuery) AllP(ctx context.Context, exec boil.ContextExecutor) SSHKeyResourceSlice {
	o, err := q.All(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return o
}

// All returns all SSHKeyResource records from the query.
func (q sshKeyResourceQuery) All(ctx context.Context, exec boil.ContextExecutor) (SSHKeyResourceSlice, error) {
	var o []*SSHKeyResource

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SSHKeyResource slice")
	}

	if len(sshKeyResourceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountP returns the count of all SSHKeyResource records in the query, and panics on error.
func (q sshKeyResourceQuery) CountP(ctx context.Context, exec boil.ContextExecutor) int64 {
	c, err := q.Count(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return c
}

// Count returns the count of all SSHKeyResource records in the query.
func (q sshKeyResourceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count ssh_key_resources rows")
	}

	return count, nil
}

// ExistsP checks if the row exists in the table, and panics on error.
func (q sshKeyResourceQuery) ExistsP(ctx context.Context, exec boil.ContextExecutor) bool {
	e, err := q.Exists(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// Exists checks if the row exists in the table.
func (q sshKeyResourceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if ssh_key_resources exists")
	}

	return count > 0, nil
}

// SSHKey pointed to by the foreign key.
func (o *SSHKeyResource) SSHKey(mods ...qm.QueryMod) sshKeyQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.SSHKeyID),
	}

	queryMods = append(queryMods, mods...)

	return SSHKeys(queryMods...)
}

// LoadSSHKey allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sshKeyResourceL) LoadSSHKey(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSSHKeyResource interface{}, mods queries.Applicator) error {
	var slice []*SSHKeyResource
	var object *SSHKeyResource

	if singular {
		object = maybeSSHKeyResource.(*SSHKeyResource)
	} else {
		slice = *maybeSSHKeyResource.(*[]*SSHKeyResource)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sshKeyResourceR{}
		}
		args = append(args, object.SSHKeyID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sshKeyResourceR{}
			}

			for _, a := range args {
				if a == obj.SSHKeyID {
					continue Outer
				}
			}

			args = append(args, obj.SSHKeyID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`ssh_keys`),
		qm.WhereIn(`ssh_keys.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load SSHKey")
	}

	var resultSlice []*SSHKey
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice SSHKey")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for ssh_keys")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for ssh_keys")
	}

	if len(sshKeyResourceAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.SSHKey = foreign
		if foreign.R == nil {
			foreign.R = &sshKeyR{}
		}
		foreign.R.SSHKeyResources = append(foreign.R.SSHKeyResources, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.SSHKeyID == foreign.ID {
				local.R.SSHKey = foreign
				if foreign.R == nil {
					foreign.R = &sshKeyR{}
				}
				foreign.R.SSHKeyResources = append(foreign.R.SSHKeyResources, local)
				break
			}
		}
	}

	return nil
}

// SetSSHKeyP of the sshKeyResource to the related item.
// Sets o.R.SSHKey to related.
// Adds o to related.R.SSHKeyResources.
// Panics on error.
func (o *SSHKeyResource) SetSSHKeyP(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SSHKey) {
	if err := o.SetSSHKey(ctx, exec, insert, related); err != nil {
		panic(boil.WrapErr(err))
	}
}

// SetSSHKey of the sshKeyResource to the related item.
// Sets o.R.SSHKey to related.
// Adds o to related.R.SSHKeyResources.
func (o *SSHKeyResource) SetSSHKey(ctx context.Context, exec boil.ContextExecutor, insert bool, related *SSHKey) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"ssh_key_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"ssh_key_id"}),
		strmangle.WhereClause("\"", "\"", 0, sshKeyResourcePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.SSHKeyID = related.ID
	if o.R == nil {
		o.R = &sshKeyResourceR{
			SSHKey: related,
		}
	} else {
		o.R.SSHKey = related
	}

	if related.R == nil {
		related.R = &sshKeyR{
			SSHKeyResources: SSHKeyResourceSlice{o},
		}
	} else {
		related.R.SSHKeyResources = append(related.R.SSHKeyResources, o)
	}

	return nil
}

// SSHKeyResources retrieves all the records using an executor.
func SSHKeyResources(mods ...qm.QueryMod) sshKeyResourceQuery {
	mods = append(mods, qm.From("\"ssh_key_resources\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"ssh_key_resources\".*"})
	}

	return sshKeyResourceQuery{NewQuery(mods...)}
}

// FindSSHKeyResourceP retrieves a single record by ID with an executor, and panics on error.
func FindSSHKeyResourceP(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) *SSHKeyResource {
	retobj, err := FindSSHKeyResource(ctx, exec, iD, selectCols...)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return retobj
}

// FindSSHKeyResource retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSSHKeyResource(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SSHKeyResource, error) {
	sshKeyResourceObj := &SSHKeyResource{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"ssh_key_resources\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sshKeyResourceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from ssh_key_resources")
	}

	if err = sshKeyResourceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sshKeyResourceObj, err
	}

	return sshKeyResourceObj, nil
}

// InsertP a single record using an executor, and panics on error. See Insert
// for whitelist behavior description.
func (o *SSHKeyResource) InsertP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) {
	if err := o.Insert(ctx, exec, columns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SSHKeyResource) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ssh_key_resources provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sshKeyResourceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sshKeyResourceInsertCacheMut.RLock()
	cache, cached := sshKeyResourceInsertCache[key]
	sshKeyResourceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sshKeyResourceAllColumns,
			sshKeyResourceColumnsWithDefault,
			sshKeyResourceColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, sshKeyResourceGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"ssh_key_resources\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"ssh_key_resources\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into ssh_key_resources")
	}

	if !cached {
		sshKeyResourceInsertCacheMut.Lock()
		sshKeyResourceInsertCache[key] = cache
		sshKeyResourceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// UpdateP uses an executor to update the SSHKeyResource, and panics on error.
// See Update for more documentation.
func (o *SSHKeyResource) UpdateP(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) int64 {
	rowsAff, err := o.Update(ctx, exec, columns)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Update uses an executor to update the SSHKeyResource.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SSHKeyResource) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sshKeyResourceUpdateCacheMut.RLock()
	cache, cached := sshKeyResourceUpdateCache[key]
	sshKeyResourceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sshKeyResourceAllColumns,
			sshKeyResourcePrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, sshKeyResourceGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update ssh_key_resources, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"ssh_key_resources\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sshKeyResourcePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, append(wl, sshKeyResourcePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update ssh_key_resources row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for ssh_key_resources")
	}

	if !cached {
		sshKeyResourceUpdateCacheMut.Lock()
		sshKeyResourceUpdateCache[key] = cache
		sshKeyResourceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAllP updates all rows with matching column names, and panics on error.
func (q sshKeyResourceQuery) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := q.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values.
func (q sshKeyResourceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for ssh_key_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for ssh_key_resources")
	}

	return rowsAff, nil
}

// UpdateAllP updates all rows with the specified column values, and panics on error.
func (o SSHKeyResourceSlice) UpdateAllP(ctx context.Context, exec boil.ContextExecutor, cols M) int64 {
	rowsAff, err := o.UpdateAll(ctx, exec, cols)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SSHKeyResourceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"ssh_key_resources\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyResourcePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sshKeyResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sshKeyResource")
	}
	return rowsAff, nil
}

// UpsertP attempts an insert using an executor, and does an update or ignore on conflict.
// UpsertP panics on error.
func (o *SSHKeyResource) UpsertP(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) {
	if err := o.Upsert(ctx, exec, updateOnConflict, conflictColumns, updateColumns, insertColumns); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SSHKeyResource) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no ssh_key_resources provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sshKeyResourceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sshKeyResourceUpsertCacheMut.RLock()
	cache, cached := sshKeyResourceUpsertCache[key]
	sshKeyResourceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sshKeyResourceAllColumns,
			sshKeyResourceColumnsWithDefault,
			sshKeyResourceColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sshKeyResourceAllColumns,
			sshKeyResourcePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert ssh_key_resources, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sshKeyResourcePrimaryKeyColumns))
			copy(conflict, sshKeyResourcePrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"ssh_key_resources\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sshKeyResourceType, sshKeyResourceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert ssh_key_resources")
	}

	if !cached {
		sshKeyResourceUpsertCacheMut.Lock()
		sshKeyResourceUpsertCache[key] = cache
		sshKeyResourceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// DeleteP deletes a single SSHKeyResource record with an executor.
// DeleteP will match against the primary key column to find the record to delete.
// Panics on error.
func (o *SSHKeyResource) DeleteP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.Delete(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// Delete deletes a single SSHKeyResource record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SSHKeyResource) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SSHKeyResource provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sshKeyResourcePrimaryKeyMapping)
	sql := "DELETE FROM \"ssh_key_resources\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from ssh_key_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for ssh_key_resources")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows, and panics on error.
func (q sshKeyResourceQuery) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := q.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all matching rows.
func (q sshKeyResourceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sshKeyResourceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from ssh_key_resources")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ssh_key_resources")
	}

	return rowsAff, nil
}

// DeleteAllP deletes all rows in the slice, using an executor, and panics on error.
func (o SSHKeyResourceSlice) DeleteAllP(ctx context.Context, exec boil.ContextExecutor) int64 {
	rowsAff, err := o.DeleteAll(ctx, exec)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return rowsAff
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SSHKeyResourceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sshKeyResourceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"ssh_key_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyResourcePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sshKeyResource slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for ssh_key_resources")
	}

	if len(sshKeyResourceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadP refetches the object from the database with an executor. Panics on error.
func (o *SSHKeyResource) ReloadP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.Reload(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SSHKeyResource) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSSHKeyResource(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllP refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
// Panics on error.
func (o *SSHKeyResourceSlice) ReloadAllP(ctx context.Context, exec boil.ContextExecutor) {
	if err := o.ReloadAll(ctx, exec); err != nil {
		panic(boil.WrapErr(err))
	}
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SSHKeyResourceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SSHKeyResourceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sshKeyResourcePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"ssh_key_resources\".* FROM \"ssh_key_resources\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sshKeyResourcePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SSHKeyResourceSlice")
	}

	*o = slice

	return nil
}

// SSHKeyResourceExistsP checks if the SSHKeyResource row exists. Panics on error.
func SSHKeyResourceExistsP(ctx context.Context, exec boil.ContextExecutor, iD int64) bool {
	e, err := SSHKeyResourceExists(ctx, exec, iD)
	if err != nil {
		panic(boil.WrapErr(err))
	}

	return e
}

// SSHKeyResourceExists checks if the SSHKeyResource row exists.
func SSHKeyResourceExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"ssh_key_resources\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if ssh_key_resources exists")
	}

	return exists, nil
}
