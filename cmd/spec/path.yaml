---
openapi: 3.0.0
info:
  description: "THIS API IS IN DEVELOPMENT - ENDPOINTS MIGHT CHANGE"
  license:
    name: GPL-3.0
  title: provisioning-api
  version: 1.0.0

paths:
  /pubkeys/{ID}:
    get:
      operationId: getPubkeyById
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        Pubkeys must have unique name and body (SSH public key fingerprint) per each account.
        To find if a pubkey was uploaded to particular cloud, check PubkeyResource resource.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID of resource.'
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.PubkeyResponse'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
    delete:
      operationId: removePubkeyById
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        If a pubkey was uploaded to one or more clouds, the deletion request will
        attempt to delete those SSH keys from all clouds. This means in order to delete
        a pubkey the account must have valid credentials to all cloud accounts the pubkey
        was uploaded to, otherwise the delete operation will fail and the pubkey will
        not be deleted from Provisioning database.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID of resource.'
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.PubkeyResponse'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /pubkeys:
    post:
      operationId: createPubkey
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        When pubkey is created, it is stored in the Provisioning database. Pubkeys are
        uploaded to clouds when an instance is launched.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/v1.PubkeyRequest"
        description: request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.PubkeyResponse'
        "500":
          $ref: '#/components/responses/InternalError'
    get:
      operationId: getPubkeyList
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        This operation returns list of all pubkeys for particular account.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.PubkeyResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /sources:
    get:
      description: 'Return list of provisioning sources'
      operationId: getSourceList
      responses:
        '200':
          description: Returned on success.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SourceResponse'
        '500':
          $ref: "#/components/responses/InternalError"
  /sources/{ID}/instance_types:
      get:
        description: 'Return a list of instance types'
        operationId: getInstanceTypeList
        parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Source ID from Sources Database'
        - in: query
          name: region
          schema:
            type: string
          required: true
          description: List instance types of the specified region
        responses:
          '200':
            description: Return on success.
            content:
              application/json:
                schema:
                  type: array
                  items:
                    $ref: '#/components/schemas/v1.InstanceTypeResponse'
          '404':
            $ref: "#/components/responses/NotFound"
          '500':
            $ref: "#/components/responses/InternalError"
  /reservations:
    get:
      operationId: getReservationsList
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        This operation returns list of all reservations for particular account. To get a
        reservation with common fields, use /reservations/ID. To get a detailed reservation
        with all fields which are different per provider, use /reservations/aws/ID.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.ReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/{ID}:
    get:
      description: 'Return a generic reservation by id'
      operationId: getReservationByID
      parameters:
      - in: path
        name: ID
        schema:
          type: integer
          format: int64
        required: true
        description: 'Reservation ID'
      responses:
        "200":
          description: 'Returns generic reservation information like status or creation time.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ReservationResponse'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/aws:
    post:
      operationId: createAwsReservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        An AWS reservation is a reservation created for an AWS job. Image Builder UUID image
        is required, the service will also launch any AMI image prefixed with "ami-".
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AWSReservationRequest'
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AWSReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/aws/{ID}:
    get:
      description: 'Return an AWS reservation with details by id'
      operationId: getAWSReservationByID
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Reservation ID, must be an AWS reservation otherwise 404 is returned'
      responses:
        "200":
          description: 'Returns detailed reservation information for an AWS reservation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AWSReservationResponse'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/noop:
    post:
      operationId: createNoopReservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        A Noop reservation actually does nothing and immediately finish background job.
        This reservation has no input payload
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.NoopReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
