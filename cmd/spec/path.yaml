---
openapi: 3.0.0
info:
  description: "Provisioning service API"
  license:
    name: GPL-3.0
  title: provisioning-api
  version: 1.0.0
tags:
  - name: Pubkey
    description: Public SSH keys operations
paths:
  /pubkeys/{ID}:
    get:
      operationId: getPubkeyById
      tags:
        - Pubkey
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        Pubkeys must have unique name and body (SSH public key fingerprint) per each account.
        Pubkey type is detected during create operation as well as fingerprints.
        Currently two types are supported: RSA and ssh-ed25519. Also, two fingerprint
        types are calculated: standard SHA fingerprint and legacy MD5 fingerprint available
        under fingerprint_legacy field. Fingerprints are used to check uniqueness of key.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID to search for'
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: 'Returned on success'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.PubkeyResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.PubkeyResponseExample'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
    delete:
      operationId: removePubkeyById
      tags:
        - Pubkey
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        If a pubkey was uploaded to one or more clouds, the deletion request will
        attempt to delete those SSH keys from all clouds. This means in order to delete
        a pubkey the account must have valid credentials to all cloud accounts the pubkey
        was uploaded to, otherwise the delete operation will fail and the pubkey will
        not be deleted from Provisioning database.
        This operation returns no body.
      parameters:
        - name: ID
          in: path
          required: true
          description: 'Database ID of resource.'
          schema:
            type: integer
            format: int64
      responses:
        "204":
          description: The Pubkey was deleted successfully.
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /pubkeys:
    post:
      operationId: createPubkey
      tags:
        - Pubkey
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        When pubkey is created, it is stored in the Provisioning database. Pubkeys are
        uploaded to clouds when an instance is launched. Some fields (e.g. type or
        fingerprint) are read only.
      requestBody:
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/v1.PubkeyRequest"
            examples:
              example:
                $ref: '#/components/examples/v1.PubkeyRequestExample'
        description: request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.PubkeyResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.PubkeyRequestExample'
        "500":
          $ref: '#/components/responses/InternalError'
    get:
      operationId: getPubkeyList
      tags:
        - Pubkey
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      description: >
        A pubkey represents an SSH public portion of a key pair with name and body.
        This operation returns list of all pubkeys for particular account.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ListPubkeyResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.PubkeyListResponseExample'
        "500":
          $ref: '#/components/responses/InternalError'
  /sources:
    get:
      description: >
        Cloud credentials are kept in the sources application. This endpoint lists available
        sources for the particular account per individual type (AWS, Azure, ...). All the fields
        in the response are optional and can be omitted if Sources application also omits them.
      operationId: getSourceList
      tags:
        - Source
      parameters:
        - name: provider
          in: query
          schema:
            type: string
            enum:
                - aws
                - azure
                - gcp
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      responses:
        '200':
          description: Returned on success.
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/v1.ListSourceResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.SourceListResponseExample'
        '500':
          $ref: "#/components/responses/InternalError"
  /sources/{ID}/account_identity:
    get:
      description: 'This endpoint is deprecated. Please use upload_info instead'
      deprecated: true
      operationId: getSourceAccountIdentity
      tags:
        - Source
      parameters:
      - in: path
        name: ID
        schema:
          type: integer
          format: int64
        required: true
        description: 'Source ID from Sources Database'
      responses:
        '200':
          description: Return on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AccountIDTypeResponse'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
  /sources/{ID}/upload_info:
    get:
      operationId: getSourceUploadInfo
      tags:
        - Source
      description: >
        Provides all necessary information to upload an image for given Source. Typically, this
        is account number, subscription ID but some hyperscaler types also provide additional data.

        The response contains "provider" field which can be one of aws, azure or gcp and then exactly
        one field named "aws", "azure" or "gcp". Enum is not used due to limitation of the language (Go).

        Some types may perform more than one calls (e.g. Azure) so latency might be increased. Caching
        of static information is performed to improve latency of consequent calls.
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Source ID from Sources Database'
      responses:
        '200':
          description: Return on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.SourceUploadInfoResponse'
              examples:
                aws:
                  $ref: '#/components/examples/v1.SourceUploadInfoAWSResponse'
                azure:
                  $ref: '#/components/examples/v1.SourceUploadInfoAzureResponse'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
  /sources/{ID}/instance_types:
    get:
      description: 'Deprecated endpoint, use /instance_types instead.'
      deprecated: true
      operationId: getInstanceTypeList
      tags:
        - Source
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Source ID from Sources Database'
        - in: query
          name: region
          schema:
            type: string
          required: true
          description: Hyperscaler region
      responses:
        '200':
          description: Return on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ListInstaceTypeResponse'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
  /sources/{ID}/launch_templates:
    get:
      description: >
        Return a list of launch templates.

        A launch template is a configuration set with a name that is available through hyperscaler
        API. When creating reservations, launch template can be provided in order to set additional
        configuration for instances.
        In GCP, when using templates, propagated user attributes are not overridden or updated.
        Only new attributes are added to the instance.
        
        Currently AWS and GCP Launch Templates are supported.
      operationId: getLaunchTemplatesList
      tags:
        - Source
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: Source ID from Sources Database
        - in: query
          name: region
          schema:
            type: string
          required: true
          description: Hyperscaler region
        - $ref: '#/components/parameters/Token'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Return on success.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ListLaunchTemplateResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.LaunchTemplateListResponse'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
  /instance_types/{PROVIDER}:
    get:
      description: >
        Return a list of instance types for particular provider. A region must be provided. A zone must be provided
        for Azure.
      operationId: getInstanceTypeListAll
      tags:
        - InstanceType
      parameters:
        - in: path
          name: PROVIDER
          schema:
            type: string
          required: true
          description: 'Cloud provider: aws, azure'
        - in: query
          name: region
          schema:
            type: string
          required: true
          description: Region to list instance types within. This is required.
        - in: query
          name: zone
          schema:
            type: string
          required: false
          description: Availability zone (or location) to list instance types within. Not applicable for AWS EC2 as
            all zones within a region are the same (will lead to an error when used). Required for Azure.
      responses:
        '200':
          description: >
            Return on success. Instance types have a field "supported" that indicates
            whether that particular type is supported by Red Hat. Typically, instances
            with less than 1.5 GiB RAM are not supported, but other rules may apply.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ListInstaceTypeResponse'
              examples:
                aws:
                  $ref: '#/components/examples/v1.InstanceTypesAWSResponse'
                azure:
                  $ref: '#/components/examples/v1.InstanceTypesAzureResponse'
        '404':
          $ref: "#/components/responses/NotFound"
        '500':
          $ref: "#/components/responses/InternalError"
  /reservations:
    get:
      operationId: getReservationsList
      tags:
        - Reservation
      parameters:
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        This operation returns list of all reservations for particular account. To get a
        reservation with common fields, use /reservations/ID. To get a detailed reservation
        with all fields which are different per provider, use /reservations/aws/ID.
        Reservation can be in three states: pending, success, failed. This can be recognized
        by the success field (null for pending, true for success, false for failure). See
        the examples.
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.ListGenericReservationResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.GenericReservationResponsePayloadListExample'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/{ID}:
    get:
      description: 'Return a generic reservation by id'
      operationId: getReservationByID
      tags:
        - Reservation
      parameters:
      - in: path
        name: ID
        schema:
          type: integer
          format: int64
        required: true
        description: 'Reservation ID'
      responses:
        "200":
          description: 'Returns generic reservation information like status or creation time.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.GenericReservationResponse'
              examples:
                pending:
                  $ref: '#/components/examples/v1.GenericReservationResponsePayloadPendingExample'
                success:
                  $ref: '#/components/examples/v1.GenericReservationResponsePayloadSuccessExample'
                failure:
                  $ref: '#/components/examples/v1.GenericReservationResponsePayloadFailureExample'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/aws:
    post:
      operationId: createAwsReservation
      tags:
        - Reservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        An AWS reservation is a reservation created for an AWS job. Image Builder UUID image
        is required, the service will also launch any AMI image prefixed with "ami-".
        Optionally, AWS EC2 launch template ID can be provided. All flags set through this
        endpoint override template values.
        Public key must exist prior calling this endpoint and ID must be provided, even when
        AWS EC2 launch template provides ssh-keys. Public key will be always be overwritten.
        A single account can create maximum of 2 reservations per second.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AWSReservationRequest'
            examples:
              example:
                $ref: '#/components/examples/v1.AwsReservationRequestPayloadExample'
        description: aws request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AWSReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/azure:
    post:
      operationId: createAzureReservation
      tags:
        - Reservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        An Azure reservation is a reservation created for an Azure job. Image Builder UUID image
        is required and needs to be stored under same account as provided by SourceID.
        A single account can create maximum of 2 reservations per second.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AzureReservationRequest'
            examples:
              example:
                $ref: '#/components/examples/v1.AzureReservationRequestPayloadExample'
        description: azure request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AzureReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/gcp:
    post:
      operationId: createGCPReservation
      tags:
        - Reservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        A GCP reservation is a reservation created for a GCP job. Image Builder UUID image
        is required and needs to be shared with the service account.
        Furthermore, by specifying the name pattern for example as "instance",
        instances names will be created in the format: "instance-#####".
        A single account can create maximum of 2 reservations per second.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.GCPReservationRequest'
        description: gcp request body
        required: true
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.GCPReservationResponse'
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/aws/{ID}:
    get:
      description: 'Return an AWS reservation with details by id'
      operationId: getAWSReservationByID
      tags:
        - Reservation
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Reservation ID, must be an AWS reservation otherwise 404 is returned'
      responses:
        "200":
          description: 'Returns detailed reservation information for an AWS reservation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AWSReservationResponse'
              examples:
                pending:
                  $ref: '#/components/examples/v1.AwsReservationResponsePayloadPendingExample'
                done:
                  $ref: '#/components/examples/v1.AwsReservationResponsePayloadDoneExample'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/azure/{ID}:
    get:
      description: 'Return an Azure reservation with details by id'
      operationId: getAzureReservationByID
      tags:
        - Reservation
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Reservation ID, must be an Azure reservation otherwise 404 is returned'
      responses:
        "200":
          description: 'Returns detailed reservation information for an Azure reservation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AzureReservationResponse'
              examples:
                pending:
                  $ref: '#/components/examples/v1.AzureReservationResponsePayloadPendingExample'
                done:
                  $ref: '#/components/examples/v1.AzureReservationResponsePayloadDoneExample'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/gcp/{ID}:
    get:
      description: 'Return an GCP reservation with details by id'
      operationId: getGCPReservationByID
      tags:
        - Reservation
      parameters:
        - in: path
          name: ID
          schema:
            type: integer
            format: int64
          required: true
          description: 'Reservation ID, must be an GCP reservation otherwise 404 is returned'
      responses:
        "200":
          description: 'Returns detailed reservation information for an GCP reservation.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.GCPReservationResponse'
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: '#/components/responses/InternalError'
  /reservations/noop:
    post:
      operationId: createNoopReservation
      tags:
        - Reservation
      description: >
        A reservation is a way to activate a job, keeps all data needed for a job to start.
        A Noop reservation actually does nothing and immediately finish background job.
        This reservation has no input payload
      responses:
        '200':
          description: 'Returned on success.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.NoopReservationResponse'
              examples:
                example:
                  $ref: '#/components/examples/v1.NoopReservationResponsePayloadExample'
        "500":
          $ref: '#/components/responses/InternalError'
  /availability_status/sources:
    post:
      operationId: availabilityStatus
      tags:
        - AvailabilityStatus
      description: >
        Schedules a background operation of Sources availability check. These checks are
        are performed in separate process at it's own pace. Results are sent via Kafka
        to Sources. There is no output from this REST operation available, no tracking
        of jobs is possible.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.AvailabilityStatusRequest'
            examples:
              example:
                $ref: '#/components/examples/v1.AvailabilityStatusRequest'
        description: availability status request with source id
        required: true
      responses:
        '200':
          description: 'Returned on success, empty response.'
        "500":
          $ref: '#/components/responses/InternalError'
