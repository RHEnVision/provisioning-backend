version: '3.7'
services:
  provisioning-db:
    restart: on-failure
    image: docker.io/postgres:13.1
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 3s
      retries: 10
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=provisioning
    volumes:
      - ./compose-data/postgres/backend:/var/lib/postgresql/data
    expose:
      - 5432
    
  redis:
    image: registry.redhat.io/rhel8/redis-6
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 2s
      timeout: 2s
      retries: 10
    expose:
      - 6379
    volumes:
      - ./compose-data/redis:/data
  
  zookeeper:
    profiles:
      - "kafka"
    container_name: zookeeper
    image: quay.io/strimzi/kafka:latest-kafka-3.4.0
    command: [
      "sh", "-c",
      "bin/zookeeper-server-start.sh config/zookeeper.properties"
    ]
    expose:
      - "2181"
    environment:
      LOG_DIR: /tmp/logs  
  
  kafka:
    profiles:
     - "kafka"
    image: quay.io/strimzi/kafka:latest-kafka-3.4.0
    command: [
      "sh", "-c",
      "bin/kafka-server-start.sh config/server.properties  --override inter.broker.listener.name=$${KAFKA_INTER_BROKER_LISTENER_NAME} --override listener.security.protocol.map=$${KAFKA_LISTENER_SECURITY_PROTOCOL_MAP} --override listeners=$${KAFKA_LISTENERS} --override advertised.listeners=$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect=$${KAFKA_ZOOKEEPER_CONNECT}"
    ]
    expose:
      - 9092
      - 29092
    depends_on:
      - zookeeper
    environment:
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      LOG_DIR: "/tmp/logs"
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: DOCKER:PLAINTEXT,LOCALHOST:PLAINTEXT
      KAFKA_LISTENERS: DOCKER://kafka:29092,LOCALHOST://localhost:9092
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:29092,LOCALHOST://localhost:9092

  init-kafka:
    profiles:
      - "kafka"
    image: quay.io/strimzi/kafka:latest-kafka-3.4.0
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic platform.sources.status --replication-factor 1 --partitions 1
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --create --if-not-exists --topic platform.provisioning.internal.availability-check --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      bin/kafka-topics.sh --bootstrap-server kafka:29092 --list
      "
    depends_on:
      - kafka
      - zookeeper
  
  backend:
    env_file:
      - config/api.env
    depends_on:
      migrate:
        condition: service_completed_successfully
      provisioning-db:
        condition: service_healthy
    build:
      context: .
      dockerfile: build/Dockerfile.dev
    ports:
      - ${APP_PORT:-8000}:${APP_PORT:-8000}
      - ${PROMETHEUS_PORT:-9000}:${PROMETHEUS_PORT:-9000}
    volumes:
      - ./:/backend

  migrate: # This service is used to run migrations
    profiles:
      - "migrate"
    build:
      context: .
      dockerfile: build/Dockerfile.dev
    env_file:
      - config/api.env
    depends_on:
      provisioning-db:
        condition: service_healthy
    entrypoint: [go,run,/build/cmd/pbackend migrate]

  frontend:
    profiles:
      - "frontend"
    environment:
      - PROV_API_HOST=backend
      - WATCHPACK_POLLING=true
    build:
      context: ../provisioning-frontend
      dockerfile: Dockerfile.dev
    volumes:
      - ../provisioning-frontend/:/prov-frontend
    ports: 
      - 1337:1337
    depends_on:
    - backend

  sources:
    profiles:
      - "sources"
    build:
      context: ../sources-api-go
    ports: 
      - 8131:8131
    env_file:
      - scripts/sources.local.conf
    depends_on:
      redis:
        condition: service_healthy
      sources-db:
        condition: service_healthy
  sources-db:
    restart: on-failure
    profiles:
      - "sources"
    image: docker.io/postgres:13.1
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 2s
      timeout: 2s
      retries: 10
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sources_devel
    volumes:
      - ./compose-data/postgres/sources:/var/lib/postgresql/data
    expose:
      - 5432
